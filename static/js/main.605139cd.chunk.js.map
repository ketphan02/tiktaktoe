{"version":3,"sources":["components/Square.tsx","components/GameGrid.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","square","backgroundColor","palette","background","default","borderRadius","shape","borderColor","borderStyle","borderWidth","margin","length","window","innerHeight","width","height","blue","primary","main","red","secondary","no","warning","Square","x","y","grids","setGrids","turn","classes","state","announceWin","val","alert","Array","from","current","Paper","elevation","className","onClick","arr","countX","i","countY","countDiag1","countDiag2","Math","max","checkWinLose","root","display","flexWrap","justifyContent","paper","padding","spacing","row","flexDirection","alignItems","GameGrid","React","map","entry","j","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.605139cd.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Paper, makeStyles } from '@material-ui/core';\n\nexport interface SquareProps {\n  length: number;\n  x: number;\n  y: number;\n  grids: Array<Array<number>>;\n  setGrids: React.Dispatch<React.SetStateAction<Array<Array<number>>>>;\n  turn: React.MutableRefObject<boolean>;\n}\n\ninterface SquareStyle {\n  length: number;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  square: {\n    backgroundColor: theme.palette.background.default,\n    borderRadius: theme.shape.borderRadius,\n    borderColor: 'black',\n    borderStyle: 'solid',\n    borderWidth: '0.2px',\n    margin: ({ length }: SquareStyle) => window.innerHeight / (length * 20),\n    width: ({ length }: SquareStyle) => window.innerHeight / (length * 1.3),\n    height: ({ length }: SquareStyle) => window.innerHeight / (length * 1.3),\n  },\n  blue: {\n    backgroundColor: theme.palette.primary.main,\n  },\n  red: {\n    backgroundColor: theme.palette.secondary.main,\n  },\n  no: {\n    '&:hover': {\n      backgroundColor: theme.palette.warning.main,\n    },\n  },\n}));\n\nconst Square: React.FC<SquareProps> = ({\n  length,\n  x,\n  y,\n  grids,\n  setGrids,\n  turn,\n}: SquareProps) => {\n  const classes = useStyles({ length });\n  const state = grids[x][y];\n\n  const resetGame = () => {\n    setGrids(Array.from({ length }, () => Array.from({ length }, () => 0)));\n    turn.current = true;\n  };\n\n  const announceWin = (val : number) => {\n    alert(`Player ${val} won!`);\n    resetGame();\n  };\n\n  const checkWinLose = (val: number) => {\n    let countX = 1;\n    for (let i = x + 1; i < length && grids[i][y] === val; i++) ++countX;\n    for (let i = x - 1; i >= 0 && grids[i][y] === val; i--) ++countX;\n\n    let countY = 1;\n    for (let i = y + 1; i < length && grids[x][i] === val; i++) ++countY;\n    for (let i = y - 1; i >= 0 && grids[x][i] === val; i--) ++countY;\n\n    let countDiag1 = 1;\n    for (let i = 1; x + i < length && y + i < length && grids[x + i][y + i] === val; i++) ++countDiag1;\n    for (let i = 1; x - i >= 0 && y - i >= 0 && grids[x - i][y - i] === val; i++) ++countDiag1;\n\n    let countDiag2 = 1;\n    for (let i = 1; x + i < length && y - i >= 0 && grids[x + i][y - i] === val; i++) ++countDiag2;\n    for (let i = 1; x - i >= 0 && y + i < length && grids[x - i][y + i] === val; i++) ++countDiag2;\n\n    if (Math.max(countX, countY, countDiag1, countDiag2) >= 5) {\n      announceWin(val);\n    }\n  };\n\n  const onClickSquare = () => {\n    if (grids[x][y] === 0) {\n      if (turn.current) {\n        const arr = [...grids];\n        arr[x][y] = 1;\n        setGrids(arr);\n        turn.current = false;\n      } else {\n        const arr = [...grids];\n        arr[x][y] = 2;\n        setGrids(arr);\n        turn.current = true;\n      }\n      checkWinLose(turn.current ? 2 : 1);\n    }\n  };\n  const colorClass = () => {\n    if (state === 1) return classes.blue;\n    if (state === 2) return classes.red;\n    return classes.no;\n  };\n\n  return (\n    <Paper\n      elevation={0}\n      className={`${classes.square} ${colorClass()}`}\n      onClick={onClickSquare}\n    />\n  );\n};\n\nexport default Square;\n","import * as React from 'react';\nimport { makeStyles } from '@material-ui/core';\n\nimport Square from './Square';\n\nexport interface GridProps {\n  length: number;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(5),\n  },\n  row: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n  },\n}));\n\nconst GameGrid = ({ length }: GridProps) => {\n  const classes = useStyles();\n  const turn = React.useRef(true);\n  const [grids, setGrids]: [\n    Array<Array<number>>,\n    React.Dispatch<React.SetStateAction<Array<Array<number>>>>,\n  ] = React.useState(\n    Array.from({ length }, () => Array.from({ length }, () => 0)),\n  );\n\n  return (\n    <div className={classes.root}>\n      {grids.map((row: Array<number>, i: number) => (\n        <div className={classes.row}>\n          {row.map((entry: number, j: number) => (\n            <Square\n              length={length}\n              x={i}\n              y={j}\n              grids={grids}\n              setGrids={setGrids}\n              turn={turn}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default GameGrid;\n","import * as React from 'react';\n// import Header from './components/Header';\nimport GameGrid from './components/GameGrid';\n\nconst App = () => (\n  <div className='App'>\n    {/* <Header /> */}\n    <GameGrid length={20} />\n  </div>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS,\n      getFID,\n      getFCP,\n      getLCP,\n      getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}