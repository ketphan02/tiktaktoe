{"version":3,"sources":["components/Square.tsx","components/GameGrid.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","square","backgroundColor","palette","background","default","borderRadius","shape","borderColor","borderStyle","borderWidth","margin","length","window","innerHeight","width","height","blue","primary","main","red","secondary","no","warning","Square","x","y","grids","turn","gameHistory","classes","React","colorClass","setColorClass","undoMove","popNode","current","pop","setColor","announceWin","val","alert","resetGame","Paper","elevation","className","onClick","push","countX","i","countY","countDiag1","countDiag2","Math","max","checkWinLose","root","display","flexWrap","justifyContent","paper","padding","spacing","row","flexDirection","alignItems","GameGrid","Array","from","map","entry","j","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mLAkBMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,OAAQ,CACNC,gBAAiBF,EAAMG,QAAQC,WAAWC,QAC1CC,aAAcN,EAAMO,MAAMD,aAC1BE,YAAa,QACbC,YAAa,QACbC,YAAa,QACbC,OAAQ,gBAAGC,EAAH,EAAGA,OAAH,OAA6BC,OAAOC,aAAwB,GAATF,IAC3DG,MAAO,gBAAGH,EAAH,EAAGA,OAAH,OAA6BC,OAAOC,aAAwB,IAATF,IAC1DI,OAAQ,gBAAGJ,EAAH,EAAGA,OAAH,OAA6BC,OAAOC,aAAwB,IAATF,KAE7DK,KAAM,CACJf,gBAAiBF,EAAMG,QAAQe,QAAQC,MAEzCC,IAAK,CACHlB,gBAAiBF,EAAMG,QAAQkB,UAAUF,MAE3CG,GAAI,CACF,UAAW,CACTpB,gBAAiBF,EAAMG,QAAQoB,QAAQJ,WAmF9BK,EA9EuB,SAAC,GAOnB,IANlBZ,EAMiB,EANjBA,OACAa,EAKiB,EALjBA,EACAC,EAIiB,EAJjBA,EACAC,EAGiB,EAHjBA,MACAC,EAEiB,EAFjBA,KACAC,EACiB,EADjBA,YAEMC,EAAUhC,EAAU,CAAEc,WAC5B,EAA4FmB,WAAeD,EAAQR,IAAnH,mBAAOU,EAAP,KAAmBC,EAAnB,KAEMC,EAAW,WACf,IAAMC,EAAUN,EAAYO,QAAQC,MAChCF,IACFR,EAAMQ,EAAQV,GAAGU,EAAQT,GAAGU,QAAU,EACtCD,EAAQG,SAASR,EAAQR,KAE3BM,EAAKQ,SAAWR,EAAKQ,SAUjBG,EAAc,SAACC,GACnBC,MAAM,UAAD,OAAWD,EAAX,UARW,WAChB,KAAOX,EAAYO,QAAQxB,OAAS,GAClCsB,IAEFN,EAAKQ,SAAU,EAKfM,IAwCF,OACE,cAACC,EAAA,EAAD,CACEC,UAAW,EACXC,UAAS,UAAKf,EAAQ7B,OAAb,YAAuB+B,GAChCc,QAnBkB,WACQ,IAAxBnB,EAAMF,GAAGC,GAAGU,UACVR,EAAKQ,SACPT,EAAMF,GAAGC,GAAGU,QAAU,EACtBH,EAAcH,EAAQb,QAEtBU,EAAMF,GAAGC,GAAGU,QAAU,EACtBH,EAAcH,EAAQV,MAExBQ,EAAKQ,SAAWR,EAAKQ,QACrBP,EAAYO,QAAQW,KAAK,CAAEtB,IAAGC,IAAGY,SAAUL,IAhC1B,SAACO,GAEpB,IADA,IAAIQ,EAAS,EACJC,EAAIxB,EAAI,EAAGwB,EAAIrC,GAAUe,EAAMsB,GAAGvB,GAAGU,UAAYI,EAAKS,MAAOD,EACtE,IAAK,IAAIC,EAAIxB,EAAI,EAAGwB,GAAK,GAAKtB,EAAMsB,GAAGvB,GAAGU,UAAYI,EAAKS,MAAOD,EAGlE,IADA,IAAIE,EAAS,EACJD,EAAIvB,EAAI,EAAGuB,EAAIrC,GAAUe,EAAMF,GAAGwB,GAAGb,UAAYI,EAAKS,MAAOC,EACtE,IAAK,IAAID,EAAIvB,EAAI,EAAGuB,GAAK,GAAKtB,EAAMF,GAAGwB,GAAGb,UAAYI,EAAKS,MAAOC,EAGlE,IADA,IAAIC,EAAa,EACRF,EAAI,EAAGxB,EAAIwB,EAAIrC,GAAUc,EAAIuB,EAAIrC,GAAUe,EAAMF,EAAIwB,GAAGvB,EAAIuB,GAAGb,UAAYI,EAAKS,MAAOE,EAChG,IAAK,IAAIF,EAAI,EAAGxB,EAAIwB,GAAK,GAAKvB,EAAIuB,GAAK,GAAKtB,EAAMF,EAAIwB,GAAGvB,EAAIuB,GAAGb,UAAYI,EAAKS,MAAOE,EAGxF,IADA,IAAIC,EAAa,EACRH,EAAI,EAAGxB,EAAIwB,EAAIrC,GAAUc,EAAIuB,GAAK,GAAKtB,EAAMF,EAAIwB,GAAGvB,EAAIuB,GAAGb,UAAYI,EAAKS,MAAOG,EAC5F,IAAK,IAAIH,EAAI,EAAGxB,EAAIwB,GAAK,GAAKvB,EAAIuB,EAAIrC,GAAUe,EAAMF,EAAIwB,GAAGvB,EAAIuB,GAAGb,UAAYI,EAAKS,MAAOG,EAExFC,KAAKC,IAAIN,EAAQE,EAAQC,EAAYC,IAAe,GACtDb,EAAYC,GAeZe,CAAa3B,EAAKQ,QAAU,EAAI,QC5FhCtC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCwD,KAAM,CACJC,QAAS,OACTC,SAAU,OACVC,eAAgB,eAChBzD,gBAAiBF,EAAMG,QAAQC,WAAWwD,MAC1CC,QAAS7D,EAAM8D,QAAQ,IAEzBC,IAAK,CACHN,QAAS,OACTO,cAAe,MACfL,eAAgB,eAChBM,WAAY,cA8BDC,EA1BE,SAAC,GAA2B,IAAzBtD,EAAwB,EAAxBA,OACZkB,EAAUhC,IACV8B,EAAOG,UAAa,GACpBJ,EAAQwC,MAAMC,KAAK,CAAExD,WAAU,kBAAMuD,MAAMC,KAAK,CAAExD,WAAU,kBAAMmB,SAAa,SAC/EF,EAAmDE,SAAa,IAEtE,OACE,qBAAKc,UAAWf,EAAQ0B,KAAxB,SACG7B,EAAM0C,KAAI,SAACN,EAAKd,GAAN,OACT,qBAAKJ,UAAWf,EAAQiC,IAAxB,SACGA,EAAIM,KAAI,SAACC,EAAOC,GAAR,OACP,cAAC,EAAD,CACE3D,OAAQA,EACRa,EAAGwB,EACHvB,EAAG6C,EACH5C,MAAOA,EACPC,KAAMA,EACNC,YAAaA,eCrCZ2C,EAPH,kBACV,qBAAK3B,UAAU,MAAf,SAEE,cAAC,EAAD,CAAUjC,OAAQ,QCaP6D,EAlBS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAMnB,IALLC,EAKI,EALJA,OACAC,EAII,EAJJA,OACAC,EAGI,EAHJA,OACAC,EAEI,EAFJA,OACAC,EACI,EADJA,QAEAJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCVdQ,IAASC,OACP,cAAC,aAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.29889f90.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Paper, makeStyles } from '@material-ui/core';\n\nimport { Move } from './GameGrid';\n\nexport interface SquareProps {\n  length: number;\n  x: number;\n  y: number;\n  grids: Array<Array<React.MutableRefObject<number>>>;\n  turn: React.MutableRefObject<boolean>;\n  gameHistory: React.MutableRefObject<Array<Move>>;\n}\n\ninterface SquareStyle {\n  length: number;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  square: {\n    backgroundColor: theme.palette.background.default,\n    borderRadius: theme.shape.borderRadius,\n    borderColor: 'black',\n    borderStyle: 'solid',\n    borderWidth: '0.2px',\n    margin: ({ length }: SquareStyle) => window.innerHeight / (length * 20),\n    width: ({ length }: SquareStyle) => window.innerHeight / (length * 1.3),\n    height: ({ length }: SquareStyle) => window.innerHeight / (length * 1.3),\n  },\n  blue: {\n    backgroundColor: theme.palette.primary.main,\n  },\n  red: {\n    backgroundColor: theme.palette.secondary.main,\n  },\n  no: {\n    '&:hover': {\n      backgroundColor: theme.palette.warning.main,\n    },\n  },\n}));\n\nconst Square: React.FC<SquareProps> = ({\n  length,\n  x,\n  y,\n  grids,\n  turn,\n  gameHistory,\n}: SquareProps) => {\n  const classes = useStyles({ length });\n  const [colorClass, setColorClass]: [string, React.Dispatch<React.SetStateAction<string>>] = React.useState(classes.no);\n\n  const undoMove = () => {\n    const popNode = gameHistory.current.pop();\n    if (popNode) {\n      grids[popNode.x][popNode.y].current = 0;\n      popNode.setColor(classes.no);\n    }\n    turn.current = !turn.current;\n  };\n\n  const resetGame = () => {\n    while (gameHistory.current.length > 0) {\n      undoMove();\n    }\n    turn.current = true;\n  };\n\n  const announceWin = (val : number) => {\n    alert(`Player ${val} won!`);\n    resetGame();\n  };\n\n  const checkWinLose = (val: number) => {\n    let countX = 1;\n    for (let i = x + 1; i < length && grids[i][y].current === val; i++) ++countX;\n    for (let i = x - 1; i >= 0 && grids[i][y].current === val; i--) ++countX;\n\n    let countY = 1;\n    for (let i = y + 1; i < length && grids[x][i].current === val; i++) ++countY;\n    for (let i = y - 1; i >= 0 && grids[x][i].current === val; i--) ++countY;\n\n    let countDiag1 = 1;\n    for (let i = 1; x + i < length && y + i < length && grids[x + i][y + i].current === val; i++) ++countDiag1;\n    for (let i = 1; x - i >= 0 && y - i >= 0 && grids[x - i][y - i].current === val; i++) ++countDiag1;\n\n    let countDiag2 = 1;\n    for (let i = 1; x + i < length && y - i >= 0 && grids[x + i][y - i].current === val; i++) ++countDiag2;\n    for (let i = 1; x - i >= 0 && y + i < length && grids[x - i][y + i].current === val; i++) ++countDiag2;\n\n    if (Math.max(countX, countY, countDiag1, countDiag2) >= 5) {\n      announceWin(val);\n    }\n  };\n\n  const onClickSquare = () => {\n    if (grids[x][y].current === 0) {\n      if (turn.current) {\n        grids[x][y].current = 1;\n        setColorClass(classes.blue);\n      } else {\n        grids[x][y].current = 2;\n        setColorClass(classes.red);\n      }\n      turn.current = !turn.current;\n      gameHistory.current.push({ x, y, setColor: setColorClass });\n      checkWinLose(turn.current ? 2 : 1);\n    }\n  };\n\n  return (\n    <Paper\n      elevation={0}\n      className={`${classes.square} ${colorClass}`}\n      onClick={onClickSquare}\n    />\n  );\n};\n\nexport default Square;\n","import * as React from 'react';\nimport { makeStyles } from '@material-ui/core';\n\nimport Square from './Square';\n\nexport interface GridProps {\n  length: number;\n}\n\nexport interface Move {\n  x: number;\n  y: number;\n  setColor: React.Dispatch<React.SetStateAction<string>>;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(5),\n  },\n  row: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n  },\n}));\n\nconst GameGrid = ({ length }: GridProps) => {\n  const classes = useStyles();\n  const turn = React.useRef(true);\n  const grids = Array.from({ length }, () => Array.from({ length }, () => React.useRef(0)));\n  const gameHistory: React.MutableRefObject<Array<Move>> = React.useRef([]);\n\n  return (\n    <div className={classes.root}>\n      {grids.map((row, i: number) => (\n        <div className={classes.row}>\n          {row.map((entry, j: number) => (\n            <Square\n              length={length}\n              x={i}\n              y={j}\n              grids={grids}\n              turn={turn}\n              gameHistory={gameHistory}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default GameGrid;\n","import * as React from 'react';\n// import Header from './components/Header';\nimport GameGrid from './components/GameGrid';\n\nconst App = () => (\n  <div className='App'>\n    {/* <Header /> */}\n    <GameGrid length={20} />\n  </div>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS,\n      getFID,\n      getFCP,\n      getLCP,\n      getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}